{"version":3,"file":"backbone.service.js","sources":["backbone.service.js","/source/backbone.service.js"],"names":["global","factory","exports","module","require","define","amd","Backbone","Service","classify","normalizeHash","Radio","_","PromisePolyfill","this","wrapHash","service","type","start","hash","each","val","key","args","Array","_len","_key","arguments","then","apply","err","onError","resolved","Promise","resolve","Channel","backbone_service","extend","constructor","once","_this","requests","commands","reply","comply","_super","setup"],"mappings":"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","sourceRoot":"/source/","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone-metal-classify'), require('backbone-normalize-hash'), require('backbone.radio'), require('underscore'), require('es6-promise')) :\n  typeof define === 'function' && define.amd ? define(['backbone-metal-classify', 'backbone-normalize-hash', 'backbone.radio', 'underscore', 'es6-promise'], factory) :\n  global.Backbone.Service = factory(global.classify, global.normalizeHash, global.Radio, global._, global.PromisePolyfill)\n}(this, function (classify, normalizeHash, Radio, _, PromisePolyfill) { 'use strict';\n\n  const resolved = PromisePolyfill.Promise.resolve();\n\n  Radio.Channel = classify(Radio.Channel);\n\n  /**\n   * @private\n   * @method wrapHash\n   * @param {Object} hash\n   * @param {Function} start\n   */\n  function wrapHash(service, type, start) {\n    let hash = normalizeHash(service, type);\n\n    _.each(hash, (val, key) => {\n      hash[key] = (...args) => {\n        return start()\n          .then(() => service[key](...args))\n          .catch(err => {\n            service.onError(err);\n            throw err;\n          });\n      };\n    });\n\n    return hash;\n  }\n\n  /**\n   * @class Service\n   */\n  var backbone_service = Radio.Channel.extend({\n    /**\n     * @constructs Service\n     */\n    constructor() {\n      let start = _.once(() => resolved.then(() => this.start()));\n\n      let requests = wrapHash(this, 'requests', start);\n      let commands = wrapHash(this, 'commands', start);\n\n      this.reply(requests);\n      this.comply(commands);\n      this._super(...arguments);\n    },\n\n    /**\n     * @abstract\n     * @method setup\n     */\n    setup() {},\n\n    /**\n     * @abstract\n     * @method start\n     */\n    start() {},\n\n    /**\n     * @abstract\n     * @method onError\n     */\n    onError() {}\n  });\n\n  return backbone_service;\n\n}));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone-metal-classify'), require('backbone-normalize-hash'), require('backbone.radio'), require('underscore'), require('es6-promise')) :\n  typeof define === 'function' && define.amd ? define(['backbone-metal-classify', 'backbone-normalize-hash', 'backbone.radio', 'underscore', 'es6-promise'], factory) :\n  global.Backbone.Service = factory(global.classify, global.normalizeHash, global.Radio, global._, global.PromisePolyfill)\n}(this, function (classify, normalizeHash, Radio, _, PromisePolyfill) { 'use strict';\n\n  const resolved = PromisePolyfill.Promise.resolve();\n\n  Radio.Channel = classify(Radio.Channel);\n\n  /**\n   * @private\n   * @method wrapHash\n   * @param {Object} hash\n   * @param {Function} start\n   */\n  function wrapHash(service, type, start) {\n    let hash = normalizeHash(service, type);\n\n    _.each(hash, (val, key) => {\n      hash[key] = (...args) => {\n        return start()\n          .then(() => service[key](...args))\n          .catch(err => {\n            service.onError(err);\n            throw err;\n          });\n      };\n    });\n\n    return hash;\n  }\n\n  /**\n   * @class Service\n   */\n  var backbone_service = Radio.Channel.extend({\n    /**\n     * @constructs Service\n     */\n    constructor() {\n      let start = _.once(() => resolved.then(() => this.start()));\n\n      let requests = wrapHash(this, 'requests', start);\n      let commands = wrapHash(this, 'commands', start);\n\n      this.reply(requests);\n      this.comply(commands);\n      this._super(...arguments);\n    },\n\n    /**\n     * @abstract\n     * @method setup\n     */\n    setup() {},\n\n    /**\n     * @abstract\n     * @method start\n     */\n    start() {},\n\n    /**\n     * @abstract\n     * @method onError\n     */\n    onError() {}\n  });\n\n  return backbone_service;\n\n}));\n"]}